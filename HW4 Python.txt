# In this exercise we shall simulate the two-dimensional Poisson process (Poisson Point Process
# in the plane and its subsets such as a square and a disc).
# (a) In the setup of the above Problem (1) simulate the two-dimensional Poisson process in the
# rectangle region [-1, 1] x [-1, 1] . Choose Lambda appropriately.
# (b) Simulate the two-dimensional Poisson process in a circular region (disc) of radius 1 and
# of center at the origin (0, 0) .
# Simulate once again the two-dimensional Poisson process now on the whole plane, and
# let Ri denote the distance between the origin (0, 0) and its i -th nearest Poisson point for i = 1, 2, . . .
# (c) Estimate the cumulative distribution function F(x) := P(R1 <= x) of R1 for every
# 0 <= x <= c1 (cf. section 11.5.2) and plot the function F(.) for 0 <= x <- c1 , where c1 is
# chosen large enough to represent the whole shape of the function F(.) .
# (d) Estimate the tail probability Gn(x) := P(Rn > x) for x > 0 , 0 <= x <= c2 , where c2 is
# chosen large enough to represent the whole shape of function Gn(.) for n = 1, 2, 3, 4 . Plot
# the function Gn(.) for n = 1, 2, 3, 4 in the same graph.

import numpy

### PART A ###

n = numpy.random.poisson(120)

pointList = []

for i in range(0,n):
  x = numpy.random.uniform(-1,1)
  y =  numpy.random.uniform(-1,1)
  pointList.append([x,y])
  
print("Part A:")  
print("")
  
for i in pointList:
  print(i[0], ", ", i[1])
print("")

### PART B ###

n = numpy.random.poisson(120)

pointList = []

for i in range(0,n):
  radius = numpy.random.uniform(0,1)
  angle = numpy.random.uniform(0,2*numpy.pi)
  pointList.append([radius*numpy.cos(angle), radius*numpy.sin(angle)])
  
print("Part B:")
print("")
  
for i in pointList:
  print(i[0], ", ", i[1])
print("")
  
### PART C ###

n = numpy.random.poisson(480)
print(n)

pointList = []

for i in range(0,n):
  x = numpy.random.uniform(-2,2)
  y =  numpy.random.uniform(-2,2)
  pointList.append((x**2 + y**2)**.5)

pointList.sort()
  
print("Part C:")  
print("")
  
for x in range(0,100):
  lowest = 0 
  for i in pointList:
    if(i <= x/35):
      lowest += 1
  print(x/35, ", ", lowest/len(pointList))
  
print("")
  
### PART D ###

low1List = []
low2List = []
low3List = []
low4List = []

for i in range(0,100):
  n = numpy.random.poisson(480)
  pointList = []

  for j in range(0,n):
    x = numpy.random.uniform(-2,2)
    y =  numpy.random.uniform(-2,2)
    pointList.append((x**2 + y**2)**.5)
  
  pointList.sort()
  low1List.append(pointList[0])
  low2List.append(pointList[1])
  low3List.append(pointList[2])
  low4List.append(pointList[3])
  
print("Part D:")
print("")
print("G_1:")
print("")
    
for x in range(0,100):
  s_1 = 0 
  for i in low1List:
    if(i > x/300):
      s_1 += 1 
  print(x/300, ", ", s_1/100)
  
print("")
print("G_2:")
print("")

for x in range(0,100):
  s_1 = 0 
  for i in low2List:
    if(i > x/300):
      s_1 += 1 
  print(x/300, ", ", s_1/100) 
  
print("")
print("G_3:")
print("")

for x in range(0,100):
  s_1 = 0 
  for i in low3List:
    if(i > x/300):
      s_1 += 1 
  print(x/300, ", ", s_1/100) 
  
print("")
print("G_4:")
print("")

for x in range(0,100):
  s_1 = 0 
  for i in low4List:
    if(i > x/300):
      s_1 += 1 
  print(x/300, ", ", s_1/100)
  
  

  
